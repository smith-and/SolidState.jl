var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SolidState","category":"page"},{"location":"#SolidState","page":"Home","title":"SolidState","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SolidState.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SolidState]","category":"page"},{"location":"#SolidState.RangeType","page":"Home","title":"SolidState.RangeType","text":"const RangeType = Union{    Tuple{Symbol,NTuple{N,T}} where {N, T <: AbstractRange}, Tuple{Symbol,AV} where AV <: AbstractVector,    Vector{Tuple{Symbol,N,N,I}},    Tuple{Symbol,Symbol,I},    Vector{NTuple{NT,I}}} where {N <: Number, I <: Integer, NT }\n\n\n\n\n\n","category":"type"},{"location":"#SolidState.ChartInfo","page":"Home","title":"SolidState.ChartInfo","text":"struct ChartInfo{T <: ChartType, RT1 <: RangeType, RT2 <: RangeType, RT3 <: RangeType, CAT <: Union{Tuple{Int,Int}}}     type::Type{T}     indices::RT1     priors::RT2     base::RT3     mn::CAT end\n\n\n\n\n\n","category":"type"},{"location":"#SolidState.ChartInfo-Tuple{}","page":"Home","title":"SolidState.ChartInfo","text":"function ChartInfo()    ChartInfo(ChartType,[(1,)],[(1,)],[(1,)],(0,0)) end\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.ChartType","page":"Home","title":"SolidState.ChartType","text":"abstract type ChartType end\n\n\n\n\n\n","category":"type"},{"location":"#SolidState.DataChart","page":"Home","title":"SolidState.DataChart","text":"DataChart{IndexT <: AbstractArray, PriorT <: AbstractArray, BaseT <: AbstractArray, DataT <: AbstractArray}\n\nA generic structure to hold Tensor Data\n\n\n\n\n\n","category":"type"},{"location":"#SolidState.DataChart-Tuple{Type{T} where T<:SolidState.ChartType, AbstractArray, AbstractArray, AbstractArray, DataType}","page":"Home","title":"SolidState.DataChart","text":"DataChart(Indices::AbstractArray, Priors::AbstractArray, Base::AbstractArray, DType::DataType; style=:normal)\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.DataIntegral","page":"Home","title":"SolidState.DataIntegral","text":"DataIntegral(ci::ChartInfo, cachedir::String; a::AbstractVector=[0.0,0.0], b::AbstractVector =[1.0,1.0])::DataIntegral\n\n\n\n\n\n","category":"type"},{"location":"#SolidState.DataIntegral-2","page":"Home","title":"SolidState.DataIntegral","text":"DataIntegral{DM <: DataMap, DA <: AbstractArray, AV <: AbstractVector, IA <: AbstractArray, EA <: AbstractArray, CIT <: ChartInfo}\n\n\n\n\n\n","category":"type"},{"location":"#SolidState.DataIntegral-Union{Tuple{AV}, NTuple{6, Any}, NTuple{7, Any}, Tuple{Any, Any, Any, Any, Any, Any, Any, AV}, Tuple{Any, Any, Any, Any, Any, Any, Any, AV, AV}} where AV<:(AbstractVector)","page":"Home","title":"SolidState.DataIntegral","text":"DataIntegral(asd, mn, datatype::Type{T} where T <: ChartType,indices,priors, base, cachedir=ENV[\"cachedir\"], a::AV=[0.0,0.0], b::AV =[1.0,1.0])::DataIntegral  where {AV <: AbstractVector}\n\nConstruction with cached objects & description\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.DataIntegral-Union{Tuple{DM}, Tuple{AV}, Tuple{Dict{String, Any}, HamiltonianDensity, SolidState.ChartType, Any, Any, Any}} where {AV<:(AbstractVector), DM<:DataMap}","page":"Home","title":"SolidState.DataIntegral","text":"DataIntegral(datatype::Type{T} where T <: ChartType,asd::Dict{String,Any},hd::HamiltonianDensity,indices,priors,base; a::AV=[0.0,0.0], b::AV =[1.0,1.0])::DataIntegral  where {AV <: AbstractVector, DM <: DataMap}\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.DataIntegral-Union{Tuple{PT}, Tuple{DM}, Tuple{AV}, Tuple{DM, AV}, Tuple{DM, AV, AV}} where {AV<:(AbstractVector), DM<:DataMap, PT<:Union{Symbol, Distributed.AbstractWorkerPool}}","page":"Home","title":"SolidState.DataIntegral","text":"DataIntegral(dm::DM, a::AV=[0.0,0.0], b::AV=[1.0,1.0];cachedir::String=\"none\", ranges::ChartInfo=ChartInfo())::DataIntegral where {AV <: AbstractVector, DM <: DataMap, PT <: Union{AbstractWorkerPool,Symbol}}\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.DataIntegral-Union{Tuple{}, Tuple{AV}} where AV<:(AbstractVector)","page":"Home","title":"SolidState.DataIntegral","text":"DataIntegral(; asd, dtype::Type{T} where T <: ChartType,indices,priors, base, cachedir, mn, a::AV=[0.0,0.0], b::AV =[1.0,1.0], kargs...)::DataIntegral  where {AV <: AbstractVector}\n\nConstruction with cached objects & description\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.DataMap-Tuple{Any, Any}","page":"Home","title":"SolidState.DataMap","text":"DataMap(pmodel,pchart; cachedir=ENV[\"cachedir\"], Λ0=:auto, style=:normal, kargs...)\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.DataMap-Tuple{Any, Tuple, Type{T} where T<:SolidState.ChartType, Any, Any, Any}","page":"Home","title":"SolidState.DataMap","text":"DataMap(model::Symbol, dtype::(Type{T} where T <: ChartType), indices0, prange, brange; cachedir, mn, Λ0=:auto, style=:normal)\n\nUses cached model\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.DataMap-Tuple{}","page":"Home","title":"SolidState.DataMap","text":"DataMap(; asd, dtype::(Type{T} where T <: ChartType), indices0, prange, brange, cachedir, mn, Λ0=:auto, style=:normal)\n\nUses cached model\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.DataSection","page":"Home","title":"SolidState.DataSection","text":"DataSection{DM <: DataMap, TC <: DataChart}\n\nA structure to hold sampling information of DataMaps over the sampling base space\n\n\n\n\n\n","category":"type"},{"location":"#SolidState.DataSection-Tuple{DataMap, AbstractArray}","page":"Home","title":"SolidState.DataSection","text":"DataSection(dm::DataMap, dom::AbstractArray)\n\nDataSection constructor\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.DataSection-Tuple{DataMap, Array{Tuple{Symbol, N, N, Int64}, 1} where N<:Number}","page":"Home","title":"SolidState.DataSection","text":"DataSection(dm::DataMap, dom::Vector{Tuple{Symbol,N,N,Int64}} where N <: Number)\n\nA Data Section constructor with a range input\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.DataSection-Tuple{}","page":"Home","title":"SolidState.DataSection","text":"DataSection(;asd,mn,dtype,N,indices,priors,base,cachedir,offset, kargs...)\n\nDictionary based constructor\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.VOL","page":"Home","title":"SolidState.VOL","text":"VOL\n\n\n\n\n\n","category":"type"},{"location":"#SolidState.LatticePoints-Tuple{Tuple{Matrix{Float64}, Array{Vector{T}, 1}} where T<:Real, Matrix{Int64}}","page":"Home","title":"SolidState.LatticePoints","text":"LatticePoints(xtal::Tuple{Array{Float64,2},Vector{Vector{T}}} where T <: Real, bnds::Array{Int64,2})::Vector{Vector{Vector{Float64}}}\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.R2D-Tuple{Real, Real}","page":"Home","title":"SolidState.R2D","text":"function R2D(α::Real,θ::Real)::Matrix{Float64}\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.base_ranges-Tuple{DataSection, Int64}","page":"Home","title":"SolidState.base_ranges","text":"base_ranges(ds::DataSection, i_b::Int)\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.class_weights-Tuple{Tuple{Symbol, Symbol}}","page":"Home","title":"SolidState.class_weights","text":"class_weights(w::Tuple{Symbol,Symbol})\n\nReturns symmetrized square triangular integral mesh weights. The weight corresponds to the average over global triangularization schemes and give corners 1.5, edges 3, and bulk 6.\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.cointegrate-Tuple{SolidState.ChartInfo, Vararg{Any, 4}}","page":"Home","title":"SolidState.cointegrate","text":"cointegrate(ci::ChartInfo,evals,cachedir,a,b)\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.combine_bases-Tuple{Any, Any}","page":"Home","title":"SolidState.combine_bases","text":"combine_bases(oldbase,dombase)\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.data_export-Tuple{Any, Any}","page":"Home","title":"SolidState.data_export","text":"data_export(datadir,strct)\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.data_import-Tuple{Any}","page":"Home","title":"SolidState.data_import","text":"data_import(datadir)\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.edge_test-Tuple{Any, Any, Any}","page":"Home","title":"SolidState.edge_test","text":"edge_test(x::NTuple{N, Float64} where N ,mins::AbstractArray,maxes::AbstractArray)\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.integral_data-Tuple{DataSection}","page":"Home","title":"SolidState.integral_data","text":"integral_data(ds::DataSection)\n\nReturns the integral in an AbstractArray type that corresponds to that of the data in DataMap of ds.\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.integrate!-Tuple{DataIntegral, DataSection}","page":"Home","title":"SolidState.integrate!","text":"integrate!(di::DataIntegral, ds::DataSection)\n\nIn place push of data section integral to the passed DataIntegral\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.integrate-Tuple{DataMap, AbstractVector, AbstractVector, Distributed.AbstractWorkerPool}","page":"Home","title":"SolidState.integrate","text":"integrate(dm::DM where DM <: DataMap, a::AbstractVector, b::AbstractVector, pool::AbstractWorkerPool; rtol=1e-12, atol=1e-12, evals::AbstractRange, ranges::ChartInfo=ChartInfo(), cachedir::String)\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.integrate-Tuple{DataMap, AbstractVector, AbstractVector, Symbol}","page":"Home","title":"SolidState.integrate","text":"integrate(dm::DM where DM <: DataMap, a::AbstractVector, b::AbstractVector, pool::Symbol = :none; rtol=1e-12, atol=1e-12, evals::Int=typemax(Int), kwargs...)::Float64\n\nCore Call to HCubature\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.integrate-Tuple{DataSection}","page":"Home","title":"SolidState.integrate","text":"integrate(ds::DataSection)\n\nReturns DataIntegral with identical DataMap and the output of integrate(ds) pushed into the first data position\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.prior_base_combine-Tuple{Any, Any}","page":"Home","title":"SolidState.prior_base_combine","text":"prior_base_combine(oldpriors,oldbase)\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.square_integration_weights-Tuple{Any}","page":"Home","title":"SolidState.square_integration_weights","text":"square_integration_weights(base)\n\nReturns the weights associated to the base of a data section\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.strip_divide-Tuple{Any, Any, Any}","page":"Home","title":"SolidState.strip_divide","text":"function strip_divide(a,b,nw)\n\nFor parallel Integration, to divide hyper k-cube into (k-1) slabs. cube is defined between to points a & b. nw specifies the number of workers, i.e. strips\n\n\n\n\n\n","category":"method"},{"location":"#SolidState.weight_classify-Tuple{Tuple{Vararg{Float64, N}} where N, AbstractArray, AbstractArray, Int64}","page":"Home","title":"SolidState.weight_classify","text":"weight_classify(x::NTuple{N, Float64} where N ,mins::AbstractArray,maxes::AbstractArray,i::Int)\n\nReturn a tuple classifying the location of each coordinate in the grid\n\n\n\n\n\n","category":"method"}]
}
